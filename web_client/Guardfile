require 'guard/mocha-node'

# Monkeypatch Guard::MochaNode to use the progress reporter properly
# https://github.com/kanzeon/guard-mocha-node/issues/8
class ::Guard::MochaNode::SpecState
  def update(run_paths = [], options = {})
    @run_paths = run_paths
    @io = ::Guard::MochaNode::Runner.run(@run_paths, options)
    @stdout     = @io[STDOUT]
    @stderr     = @io[STDERR]
    # stream stdout immediately
    until @stdout.eof?
      output = @stdout.getc
      $stdout.putc output
    end
    @stderr.each { |line| print line }
    @exitstatus = @io[THREAD].value rescue ERROR_CODE
    close_io
    update_passed_and_fixed
    update_failing_paths
    passing?
  end
end

# Running this as a separate group means the web client rebuilds quickly
# to test in the browser without waiting for Guard::MochaNode
group :build do
  # If you change the Rake tasks, you have to restart Guard
  guard 'rake', task: 'build:lib' do
    watch(%r{^src/lib/(.+)\.coffee$})
    watch(%r{^vendor/lib/(.+)\.js$})
  end
end

group :test do
  # Rebuild
  guard 'nanoc' do
    watch('nanoc.yaml')
    watch('Rules')
    watch('compass.rb')
  end

  # Run web client unit tests before rebuilding the site lib
  guard 'mocha-node',
    mocha_bin:      "node_modules/mocha/bin/mocha",
    all_on_start:   true,
    all_after_pass: false,
    reporter:       "progress" do

    watch(%r{^spec/(.+)_spec\.coffee})

    watch(%r{^src/lib/(.+)\.(js\.coffee|js|coffee)}) { |m|
      "spec/#{m[1]}_spec.coffee"
    }
    watch(%r{spec/spec_helper\.(js|coffee)}) { "spec" }
  end
end
